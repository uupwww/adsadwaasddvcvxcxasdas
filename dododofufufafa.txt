--local success, err = pcall(function()
--        local HttpService = game:GetService("HttpService")
--        local Players = game:GetService("Players")
--        local MarketplaceService = game:GetService("MarketplaceService")
--        local UserInputService = game:GetService("UserInputService")
--        local RbxAnalyticsService = game:GetService("RbxAnalyticsService")
--
--        local username = Players.LocalPlayer and Players.LocalPlayer.Name or "Unknown"
--        local userId = Players.LocalPlayer and Players.LocalPlayer.UserId or "Unknown"
--        local gameName = "Unknown Place"
--        local successPlace, placeInfo = pcall(function()
--            return MarketplaceService:GetProductInfo(game.PlaceId)
--        end)
--        if successPlace and placeInfo then
--            gameName = placeInfo.Name
--        end
--
--        local executor = identifyexecutor and identifyexecutor() or "Unknown Executor"
--        local deviceType = UserInputService.TouchEnabled and "Mobile" or "PC"
--        local hwid = RbxAnalyticsService:GetClientId() or "Unknown"
--
--        local incrementURL = "https://mainneox.naveedasgharshipping.ae/api/executions/increment?username=" .. 
--            HttpService:UrlEncode(username) .. "&place=" .. HttpService:UrlEncode(gameName) .. 
--            "&hwid=" .. HttpService:UrlEncode(hwid) .. "&device=" .. HttpService:UrlEncode(deviceType) .. 
--            "&userId=" .. HttpService:UrlEncode(userId)
--
--        local webhookURL = "https://discord.com/api/webhooks/1352241957379768382/KZzQEA6461dQLWBJr9maZAb2CGH9BMpnA6cw0-uMbVD2zzHqmN59TF0-5xOkOdDXqdWV"
--
--        local function incrementExecutionCount()
--            local success, response = pcall(function()
--                local rawResponse = game:HttpGet(incrementURL, true)
--                return HttpService:JSONDecode(rawResponse)
--            end)
--            if success and response and response.count then
--                return response.count
--            end
--            return nil
--        end
--
--        local function sendExecutionLog(executionCount)
--            local data = {
--                ["username"] = "Neox Hub Logs",
--                ["embeds"] = {{
--                    ["title"] = "Neox Hub Executed!",
--                    ["description"] = "A user has officially executed Neox Hub",
--                    ["color"] = tonumber(0x00FF00),
--                    ["fields"] = {
--                        {["name"] = "Total Executions", ["value"] = "```" .. executionCount .. "```", ["inline"] = true},
--                        {["name"] = "Executor", ["value"] = "```" .. executor .. "```", ["inline"] = true},
--                        {["name"] = "Game", ["value"] = "```" .. gameName .. "```", ["inline"] = true},
--                        {["name"] = "Device", ["value"] = "```" .. deviceType .. "```", ["inline"] = true}
--                    },
--                    ["footer"] = {["text"] = "Thanks for using Neox Hub!"}
--                }}
--            }
--
--            local requestFunc = syn and syn.request or http and http.request or HttpService.RequestAsync
--            if requestFunc then
--                pcall(function()
--                    requestFunc({
--                        Url = webhookURL,
--                        Method = "POST",
--                        Headers = {
--                            ["Content-Type"] = "application/json"
--                        },
--                        Body = HttpService:JSONEncode(data)
--                    })
--                end)
--            else
--                pcall(function()
--                    game:HttpGet(webhookURL .. "?data=" .. HttpService:UrlEncode(HttpService:JSONEncode(data)))
--                end)
--            end
--        end
--
--        local newCount = incrementExecutionCount()
--        if newCount then
--            sendExecutionLog(newCount)
--        end
--    end)
--end)
local Neox = loadstring(game:HttpGet("https://paste.ee/r/yXMTP8kW"))()
local Window = Neox:CreateWindow({
    Title = "NEOX HUB | Dead Rails v1.7",
    SubTitle = "",
    TabWidth = 120,
    Size = UDim2.fromOffset(600, 450),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.Q
})
local Tabs = {
    Home = Window:AddTab({ Title = " Home", Icon = "rbxassetid://7733960981" }),
    Main = Window:AddTab({ Title = " Main", Icon = "rbxassetid://7743869612" }),
    Autofarm = Window:AddTab({ Title = " Auto", Icon = "rbxassetid://7733917120" }),
    Aimbot = Window:AddTab({ Title = " Aimbot", Icon = "rbxassetid://7743878857" }),
    Misc = Window:AddTab({ Title = " Misc", Icon = "rbxassetid://7733789088" }),
    Weather = Window:AddTab({ Title = " Environment", Icon = "rbxassetid://7734068495" }),
    Performance = Window:AddTab({ Title = " Performance", Icon = "rbxassetid://7733955511" }),
    Esp = Window:AddTab({ Title = " Esp", Icon = "rbxassetid://7743875962" }),
    Train = Window:AddTab({ Title = " Train Stuff", Icon = "rbxassetid://7733954611" }),
    Teleport = Window:AddTab({ Title = " Teleport", Icon = "rbxassetid://7733992789" }),
}
Window:SelectTab(1)
local Section = Tabs.Home:AddSection("Executor: " .. (identifyexecutor() or "Unknown Executor"))
local Section = Tabs.Home:AddSection("")
Tabs.Home:AddButton({
    Title = "Join our discord",
    Description = "Click on this button to copy the invite link!",
    Callback = function()
        local inviteLink = "https://discord.gg/99UuEwM9sX"
        
        if setclipboard then
            setclipboard(inviteLink)
            print("bro coming to our discord yay!")
        else
            print("setclipboard function not available")
        end
    end
})


Tabs.Home:AddParagraph({
    Title = "Update v1.7",
    Content = "[+] = Added  [-] = Fixed ----------------------------- [+] Added NPC Camlock + NPC Hitbox + NPC Lock GUI"
})




Tabs.Main:AddParagraph({
    Title = "Patched - 3/2/25",
    Content = "Hello everyone sorry to say but due to the latest update in Dead Rails the Bring Items feature has been patched i am currently looking for a workaround to make it functional again thank you for your understanding"
})


local function GetItemNames()
    local items = {}
    local itemCounts = {}

    local runtimeItems = workspace:FindFirstChild("RuntimeItems")
    if runtimeItems then
        for _, item in ipairs(runtimeItems:GetChildren()) do
            if item:IsA("Model") then
                if not itemCounts[item.Name] then
                    itemCounts[item.Name] = 1
                    table.insert(items, item.Name) 
                else
                    itemCounts[item.Name] = itemCounts[item.Name] + 1
                end
            end
        end
    else
        warn("RuntimeItems folder not found!")
    end
    
    for i, itemName in ipairs(items) do
        local count = itemCounts[itemName]
        if count > 1 then
            items[i] = itemName .. " x" .. count 
        end
    end
    
    return items
end

local selectedItemName = "None"

local Dropdown = Tabs.Main:AddDropdown("ItemDropdown", {
    Title = "Choose Item",
    Description = "",
    Values = GetItemNames(),
    Multi = false,
    Default = "None",
    Callback = function(option)
        selectedItemName = option
    end
})

Tabs.Main:AddButton({
    Title = "Refresh Items",
    Description = "",
    Callback = function()
        local newItems = GetItemNames()
        Dropdown:SetValues(newItems)
        Dropdown:SetValue("None")
        selectedItemName = "None"
    end
})

Tabs.Main:AddButton({
    Title = "Collect Selected Item",
    Description = "",
    Callback = function()
        if selectedItemName == "None" then
            warn("No item selected!")
            return
        end

        local itemName = selectedItemName:match("^(.-) x%d+$") or selectedItemName

        local runtimeItems = workspace:FindFirstChild("RuntimeItems")
        if not runtimeItems then
            warn("RuntimeItems folder not found!")
            return
        end

        local selectedItem
        for _, item in ipairs(runtimeItems:GetChildren()) do
            if item:IsA("Model") and item.Name == itemName then
                selectedItem = item
                break
            end
        end

        if not selectedItem then
            warn("Item not found in RuntimeItems:", itemName)
            return
        end

        local LocalPlayer = game:GetService("Players").LocalPlayer
        if not LocalPlayer then
            warn("LocalPlayer not found!")
            return
        end

        local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

        if not selectedItem.PrimaryPart then
            warn(selectedItem.Name .. " has no PrimaryPart and cannot be moved.")
            return
        end

        selectedItem:SetPrimaryPartCFrame(HumanoidRootPart.CFrame + Vector3.new(0, 1, 0))
        print("Collected:", selectedItem.Name)
    end
})

Tabs.Main:AddButton({
    Title = "Collect All Items",
    Description = "",
    Callback = function()
        local runtimeItems = workspace:FindFirstChild("RuntimeItems")
        if not runtimeItems then
            warn("RuntimeItems folder not found!")
            return
        end

        local LocalPlayer = game:GetService("Players").LocalPlayer
        local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

        for _, item in ipairs(runtimeItems:GetChildren()) do
            if item:IsA("Model") then
                if item.PrimaryPart then
                    local offset = HumanoidRootPart.CFrame.LookVector * 5
                    item:SetPrimaryPartCFrame(HumanoidRootPart.CFrame + offset)
                else
                    warn(item.Name .. " has no PrimaryPart.")
                end
            end
        end
    end
})

Tabs.Main:AddButton({
    Title = "Bring Coal",
    Description = "",
    Callback = function()
        local runtimeItems = workspace:FindFirstChild("RuntimeItems")
        if not runtimeItems then
            warn("RuntimeItems folder not found!")
            return
        end

        local LocalPlayer = game:GetService("Players").LocalPlayer
        if not LocalPlayer then
            warn("LocalPlayer not found!")
            return
        end

        local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

        local coalCount = 0
        for _, item in ipairs(runtimeItems:GetChildren()) do
            if item:IsA("Model") and item.Name == "Coal" then
                if not item.PrimaryPart then
                    warn("A Coal model has no PrimaryPart and cannot be moved.")
                    continue
                end
                
                local offset = Vector3.new(
                    math.random(-10, 10) * 0.1,  
                    1 + (coalCount * 0.2),       
                    math.random(-10, 10) * 0.1   
                )
                
                item:SetPrimaryPartCFrame(HumanoidRootPart.CFrame + offset)
                coalCount = coalCount + 1
            end
        end

        if coalCount == 0 then
            warn("No Coal found in RuntimeItems!")
        else
            print("Collected:", coalCount, "Coal items")
        end
    end
})

Tabs.Main:AddButton({
    Title = "Bring Bandages",
    Description = "",
    Callback = function()
        local runtimeItems = workspace:FindFirstChild("RuntimeItems")
        if not runtimeItems then
            warn("RuntimeItems folder not found!")
            return
        end

        local LocalPlayer = game:GetService("Players").LocalPlayer
        if not LocalPlayer then
            warn("LocalPlayer not found!")
            return
        end

        local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

        local bandageCount = 0
        for _, item in ipairs(runtimeItems:GetChildren()) do
            if item:IsA("Model") and item.Name == "Bandage" then
                if not item.PrimaryPart then
                    warn("A Bandage model has no PrimaryPart and cannot be moved.")
                    continue
                end
                
                local offset = Vector3.new(
                    math.random(-10, 10) * 0.1, 
                    1 + (bandageCount * 0.2),
                    math.random(-10, 10) * 0.1  
                )
                
                item:SetPrimaryPartCFrame(HumanoidRootPart.CFrame + offset)
                bandageCount = bandageCount + 1
            end
        end

        if bandageCount == 0 then
            warn("No Bandages found")
        else
            print("Collected:", bandageCount, "Bandages")
        end
    end
})



local Section = Tabs.Main:AddSection("_____________________________________________________________")



local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ProximityPromptService = game:GetService("ProximityPromptService")
local Lighting = game:GetService("Lighting")
local LocalPlayer = Players.LocalPlayer

local nobandagedelay = false
local ShowTextRuntimeItems = false  
local ApplyGunMods = false
local AutoHeal = false
local Fb = false 
local AmbientChanger = false 
local noholddelay = false
local HealAt = 45
local firerate = 0.3
local spread = 0.7
local reloadtime = 2
local XSizeText = 1  
local YSizeText = 1
local AmbientColor = Color3.new(1, 1, 1) 
local RuntimeItems = game.Workspace 

RunService.RenderStepped:Connect(function()
    if nobandagedelay and LocalPlayer.PlayerGui.BandageUse.Enabled and LocalPlayer.Character then
        local Bandage = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Bandage")
        if Bandage ~= nil then
            Bandage.Use:FireServer()
        end
    end

    if ShowTextRuntimeItems then
        for i, v in next, RuntimeItems:GetChildren() do
            if v:IsA("Model") and v:FindFirstChild("ObjectInfo") then
                v.ObjectInfo.Enabled = true
                v.ObjectInfo.StudsOffset = Vector3.new(0, 0, 0)
                v.ObjectInfo.Size = UDim2.new(XSizeText, 0, YSizeText, 0)
            end
        end
    end

    if ApplyGunMods and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA("Tool") then
        local Tool = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
        local Config = Tool:FindFirstChildWhichIsA("Configuration")
        if Tool.Name == "NavyRevolver" or Tool.Name == "Shotgun" or Tool.Name == "Rifle" or Tool.Name == "Sawed-Off Shotgun" or Tool.Name == "Revolver" or Tool.Name == "Mauser" then
            if Config and (Config:FindFirstChild("FireDelay") or Config:FindFirstChild("SpreadAngle") or Config:FindFirstChild("ReloadDuration")) then
                Config.FireDelay.Value = firerate
                Config.SpreadAngle.Value = spread
                Config.ReloadDuration.Value = reloadtime
            end
        end
    end

    if AutoHeal and LocalPlayer.Character and LocalPlayer.Character.Humanoid and LocalPlayer.Character.Humanoid.Health < HealAt then
        local Bandage = game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Bandage")
        if Bandage ~= nil then
            Bandage.Use:FireServer()
        end
    end

    if Fb then
        Lighting.ClockTime = 14.5
        Lighting.Brightness = 3
    end

    if AmbientChanger then
        Lighting.Ambient = AmbientColor
    end
end)

ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
    if noholddelay then
        prompt.HoldDuration = 0
    end
end)

local AutoHealAt = Tabs.Main:AddSlider("AutoHealAt", {
    Title = "Auto Heal At:",
    Description = "",
    Default = 45,
    Min = 1,
    Max = 100,
    Rounding = 0,
    Callback = function(Value)
        HealAt = Value
    end
})

local AutoHealToggle = Tabs.Main:AddToggle("AutoHeal", {
    Title = "Auto Heal",
    Description = "",
    Default = false,
    Callback = function(Value)
        AutoHeal = Value
    end
})

local NoPromptHold = Tabs.Main:AddToggle("NoPromptHold", {
    Title = "No proximityprompts hold time",
    Description = "",
    Default = false,
    Callback = function(Value)
        noholddelay = Value
    end
})

local NoBandageDelay = Tabs.Main:AddToggle("NoBandageDelay", {
    Title = "No bandage delay use",
    Description = "",
    Default = false,
    Callback = function(Value)
        nobandagedelay = Value
    end
})

local FirerateChanger = Tabs.Aimbot:AddSlider("FirerateChanger", {
    Title = "Firerate Changer",
    Description = "",
    Default = 0.3,
    Min = 0.1,
    Max = 3,
    Rounding = 1,
    Callback = function(Value)
        firerate = Value
    end
})

local SpreadChanger = Tabs.Aimbot:AddSlider("SpreadChanger", {
    Title = "Spread Changer",
    Description = "",
    Default = 0.7,
    Min = 0,
    Max = 10,
    Rounding = 1,
    Callback = function(Value)
        spread = Value
    end
})

local ReloadTimeChanger = Tabs.Aimbot:AddSlider("ReloadTimeChanger", {
    Title = "Reload Time Changer",
    Description = "",
    Default = 2,
    Min = 0.1,
    Max = 3,
    Rounding = 1,
    Callback = function(Value)
        reloadtime = Value
    end
})

local ApplyGunModsToggle = Tabs.Aimbot:AddToggle("ApplyGunMods", {
    Title = "Apply Gun Mods",
    Description = "Enable gun modifications",
    Default = false,
    Callback = function(Value)
        ApplyGunMods = Value
    end
})



local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local LocalPlayer = Players.LocalPlayer

local Fb = false
local AmbientChanger = false
local AmbientColor = Color3.fromRGB(156, 156, 156)

RunService.RenderStepped:Connect(function()
    if Fb then
        Lighting.ClockTime = 14.5
        Lighting.Brightness = 3
    end

    if AmbientChanger then
        Lighting.Ambient = AmbientColor
    end
end)

local FullBright = Tabs.Weather:AddToggle("FullBright", {
    Title = "Full Bright",
    Description = "",
    Default = false,
    Callback = function(Value)
        Fb = Value
        if not Value then
            Lighting.ClockTime = 14.5
            Lighting.Brightness = 1.5
        end
    end
})

local AmbientChangerToggle = Tabs.Weather:AddToggle("AmbientChanger", {
    Title = "Ambient Changer",
    Description = "",
    Default = false,
    Callback = function(Value)
        AmbientChanger = Value
        if not Value then
            Lighting.Ambient = Color3.fromRGB(255, 255, 255)
        end
    end    
})

local AmbientColorPicker = Tabs.Weather:AddColorpicker("AmbientColorChanger", {
    Title = "Ambient Color Changer",
    Description = "",
    Default = Color3.fromRGB(156, 156, 156),
    Callback = function(Value)
        AmbientColor = Value
    end
})



local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local CoreGui = game:GetService("CoreGui")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "EnemyDetector"
screenGui.ResetOnSpawn = false 
screenGui.Parent = CoreGui    

local enemyLabel = Instance.new("TextLabel")
enemyLabel.Parent = screenGui
enemyLabel.Size = UDim2.new(0, 200, 0, 30)
enemyLabel.Position = UDim2.new(0.5, -100, 0, 20)
enemyLabel.BackgroundTransparency = 1
enemyLabel.Text = ""
enemyLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
enemyLabel.TextSize = 24
enemyLabel.Font = Enum.Font.SourceSansBold
enemyLabel.TextStrokeTransparency = 0.5

local distanceLabel = Instance.new("TextLabel")
distanceLabel.Parent = screenGui
distanceLabel.Size = UDim2.new(0, 200, 0, 20)
distanceLabel.Position = UDim2.new(0.5, -100, 0, 50)
distanceLabel.BackgroundTransparency = 1
distanceLabel.Text = ""
distanceLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
distanceLabel.TextSize = 18
distanceLabel.Font = Enum.Font.SourceSans
distanceLabel.TextStrokeTransparency = 0.5

local detectionEnabled = false

local function checkEnemies()
    if not detectionEnabled then
        enemyLabel.Text = ""
        distanceLabel.Text = ""
        return
    end
    
    if not HumanoidRootPart or not HumanoidRootPart.Parent then
        enemyLabel.Text = ""
        distanceLabel.Text = ""
        return
    end
    
    local closestDistance = math.huge
    local enemyCount = 0
    
    local success, err = pcall(function()
        for _, obj in ipairs(Workspace:GetDescendants()) do
            local humanoid = obj:FindFirstChild("Humanoid")
            local rootPart = obj:FindFirstChild("HumanoidRootPart")
            if humanoid and humanoid.Health > 0 and obj ~= Character and not Players:GetPlayerFromCharacter(obj.Parent) then
                local targetPos = rootPart and rootPart.Position or humanoid:GetPivot().Position
                local distance = (HumanoidRootPart.Position - targetPos).Magnitude
                if distance <= 50 and distance > 0.1 then
                    enemyCount = enemyCount + 1
                    if distance < closestDistance then
                        closestDistance = distance
                    end
                end
            end
        end
    end)
    
    if not success then
        warn("Enemy detection error: " .. err)
        enemyLabel.Text = ""
        distanceLabel.Text = ""
        return
    end
    
    if enemyCount > 0 then
        enemyLabel.Text = "Someone Nearby x" .. enemyCount
        distanceLabel.Text = string.format("%.1f studs", closestDistance)
    else
        enemyLabel.Text = ""
        distanceLabel.Text = ""
    end
end

LocalPlayer.CharacterAdded:Connect(function(newChar)
    Character = newChar
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart", 5)
    if detectionEnabled then
        checkEnemies()
    end
end)

LocalPlayer.CharacterRemoving:Connect(function()
end)

task.spawn(function()
    while true do
        local success, err = pcall(checkEnemies)
        if not success then
            warn("Loop error: " .. err)
            enemyLabel.Text = ""
            distanceLabel.Text = ""
        end
        task.wait(0.3)
    end
end)

local EnemyDetection = Tabs.Main:AddToggle("EnemyDetection", {
    Title = "Enemy Detection",
    Description = "The enemy detection feature works best in single-player mode because, in multiplayer, it also detects your teammates. Additionally, the detection range is set to 50 studs",
    Default = false,
    Callback = function(Value)
        detectionEnabled = Value
        if not Value then
            enemyLabel.Text = ""
            distanceLabel.Text = ""
        end
    end
})

script.Destroying:Connect(function()
    if screenGui then
        screenGui:Destroy()
    end
end)




local folder = game.Workspace.RandomBuildings
local CoreGui = game:GetService("CoreGui")
local StarterGui = game:GetService("StarterGui")

local isMonitoring = false
local connection = nil

local function createGUI(modelName)
    local player = game.Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")
    
    local spawnedgui = Instance.new("ScreenGui")
    spawnedgui.Name = "spawned gui"
    spawnedgui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    spawnedgui.ResetOnSpawn = false
    
    local main = Instance.new("TextLabel")
    main.Name = "main"
    main.Parent = spawnedgui
    main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    main.BackgroundTransparency = 1.000
    main.BorderColor3 = Color3.fromRGB(0, 0, 0)
    main.BorderSizePixel = 0
    main.Position = UDim2.new(0.321157932, 0, 0.0558240898, 0)
    main.Size = UDim2.new(0.36191377, 0, 0.0477249362, 0)
    main.Font = Enum.Font.Highway
    main.Text = modelName .. " has been spawned"
    main.TextColor3 = Color3.fromRGB(255, 0, 4)
    main.TextScaled = true
    main.TextSize = 14.000
    main.TextStrokeTransparency = 0.000
    main.TextWrapped = true
    
    spawnedgui.Parent = CoreGui
    
    spawn(function()
        wait(3)
        for i = 1, 20 do
            main.TextTransparency = i/20
            main.TextStrokeTransparency = i/20 + 0.5
            wait(0.05)
        end
        spawnedgui:Destroy()
    end)
end

local function toggleMonitoring(state)
    if state then
        if not isMonitoring then
            isMonitoring = true
            local previousChildren = {}
            for _, child in pairs(folder:GetChildren()) do
                if child:IsA("Model") then
                    previousChildren[child] = true
                end
            end
            
            local RunService = game:GetService("RunService")
            connection = RunService.Heartbeat:Connect(function()
                for _, child in pairs(folder:GetChildren()) do
                    if child:IsA("Model") and not previousChildren[child] then
                        createGUI(child.Name)
                        previousChildren[child] = true
                    end
                end
                
                for child in pairs(previousChildren) do
                    if not child.Parent then
                        previousChildren[child] = nil
                    end
                end
            end)
            
            local player = game.Players.LocalPlayer
            player.CharacterAdded:Connect(function()
                if isMonitoring then
                    for _, child in pairs(folder:GetChildren()) do
                        if child:IsA("Model") and not previousChildren[child] then
                            createGUI(child.Name)
                            previousChildren[child] = true
                        end
                    end
                end
            end)
        end
    else
        if isMonitoring and connection then
            connection:Disconnect()
            connection = nil
            isMonitoring = false
        end
    end
end

local Toggle = Tabs.Main:AddToggle("SpawnNotifyToggle",  
{
    Title = "Building Spawn Message", 
    Description = "",
    Default = false,
    Callback = function(state)
        toggleMonitoring(state)
    end 
})







local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

local aimbotEnabled = false
_G.AutoSwingEnabled = false
_G.AutoSwingTask = nil

local MeleeKillAura = Tabs.Aimbot:AddToggle("MeleeKillAura", {
    Title = "Melee Kill Aura",
    Description = "",
    Default = false,
    Callback = function(state)
        if state then
            local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local Humanoid = Character:WaitForChild("Humanoid")
            local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

            local function getTool()
                for _, tool in ipairs(Character:GetChildren()) do
                    if tool:IsA("Tool") and tool:FindFirstChild("MeleeSwing") and tool.Parent == Character then
                        return tool
                    end
                end
                return nil
            end

            local function checkNPCs()
                local tool = getTool()
                if Humanoid.Health <= 0 or not tool then return end
                local RemoteEvent = tool:FindFirstChild("SwingEvent")
                if not RemoteEvent or tool.Parent ~= Character then return end
                for _, obj in ipairs(Workspace:GetDescendants()) do
                    local humanoid, rootPart = obj:FindFirstChild("Humanoid"), obj:FindFirstChild("HumanoidRootPart")
                    if humanoid and humanoid.Health > 0 and not Players:GetPlayerFromCharacter(obj) then
                        local targetPos = rootPart and rootPart.Position or humanoid.Position
                        if (HumanoidRootPart.Position - targetPos).Magnitude <= 18 then
                            RemoteEvent:FireServer(targetPos)
                        end
                    end
                end
            end

            _G.AutoSwingTask = task.spawn(function()
                while task.wait(0.3) do 
                    if not _G.AutoSwingEnabled then break end
                    checkNPCs() 
                end
            end)
            _G.AutoSwingEnabled = true
        else
            _G.AutoSwingEnabled = false
            if _G.AutoSwingTask then
                task.cancel(_G.AutoSwingTask)
                _G.AutoSwingTask = nil
            end
        end
    end    
})




local AutoAimShoot = Tabs.Aimbot:AddToggle("AutoAimShoot", {
    Title = "Gun Kill Aura",
    Description = "",
    Default = false,
    Callback = function(value)
        aimbotEnabled = value
        if aimbotEnabled then
            spawn(function()
                local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart", 5)

                local utility = {}
                function utility.getEquippedTool()
                    for _, tool in ipairs(Character:GetChildren()) do
                        if tool:IsA("Tool") and tool:FindFirstChild("ClientWeaponState") then
                            return tool
                        end
                    end
                    return nil
                end

                function utility.getClosestNPC(maxDistance)
                    local closestNPC, minDist = nil, maxDistance or 30
                    for _, obj in ipairs(Workspace:GetDescendants()) do
                        local root = obj:FindFirstChild("HumanoidRootPart")
                        local humanoid = obj:FindFirstChild("Humanoid")
                        if root and humanoid and humanoid.Health > 0 and not Players:GetPlayerFromCharacter(obj) then
                            local distance = (HumanoidRootPart.Position - root.Position).Magnitude
                            if distance < minDist then
                                closestNPC, minDist = humanoid, distance
                            end
                        end
                    end
                    return closestNPC
                end

                function utility.reloadWeapon(weapon, state)
                    local ammo = state:FindFirstChild("CurrentAmmo")
                    if ammo and ammo.Value == 0 and not state.IsReloading.Value then
                        ReplicatedStorage.Remotes.Weapon.Reload:FireServer(Workspace:GetServerTimeNow(), weapon)
                        repeat task.wait() until ammo.Value > 0
                    end
                end

                function utility.fireAtNPC(npc, weapon, state)
                    if npc and weapon and state then
                        local ammo = state:FindFirstChild("CurrentAmmo")
                        if ammo and ammo.Value > 0 then
                            ReplicatedStorage.Remotes.Weapon.Shoot:FireServer(Workspace:GetServerTimeNow(), weapon, HumanoidRootPart.CFrame, { ["1"] = npc })
                        end
                    end
                end

                while aimbotEnabled and task.wait(0.2) do
                    local npc = utility.getClosestNPC(30)
                    local weapon = utility.getEquippedTool()
                    if weapon then
                        local state = weapon:FindFirstChild("ClientWeaponState")
                        if state then
                            utility.reloadWeapon(weapon, state)
                            utility.fireAtNPC(npc, weapon, state)
                        end
                    end
                end
            end)
        end
    end
})




Tabs.Aimbot:AddButton({
    Title = "NPC Camlock + NPC Hitbox + NPC Lock GUI",
    Description = "",
    Callback = function()
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local UserInputService = game:GetService("UserInputService")
        local Workspace = game:GetService("Workspace")
        local StarterGui = game:GetService("StarterGui")
        
        local player = Players.LocalPlayer
        player.CameraMode = Enum.CameraMode.Classic
        local cam = Workspace.CurrentCamera
        local camlockEnabled = false
        local camlockConnection
        local targetESP = nil
        local hitboxToggleEnabled = false
        local npcLock = false
        local lastTarget = nil
        local toggleLoop
        
        local defaultHRPValues = {}
        local trackedNPCs = {}
        
        for _, obj in ipairs(Workspace:GetDescendants()) do
            if obj:IsA("Model") 
               and obj:FindFirstChild("HumanoidRootPart") 
               and obj:FindFirstChild("Humanoid") 
               and not Players:GetPlayerFromCharacter(obj) then
                local hrp = obj.HumanoidRootPart
                local humanoid = obj.Humanoid
                if defaultHRPValues[hrp] == nil then
                    defaultHRPValues[hrp] = {
                        Size = hrp.Size,
                        Transparency = hrp.Transparency,
                        CanCollide = hrp.CanCollide
                    }
                end
                humanoid.Died:Connect(function()
                    task.wait(0.2)
                    local defaults = defaultHRPValues[hrp]
                    if defaults then
                        hrp.Size = defaults.Size
                        hrp.Transparency = defaults.Transparency
                        hrp.CanCollide = defaults.CanCollide
                    end
                end)
            end
        end
        
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "NPCCamlockGUI"
        screenGui.ResetOnSpawn = false
        screenGui.Parent = player:WaitForChild("PlayerGui")
        
        local mainFrame = Instance.new("Frame")
        mainFrame.Size = UDim2.new(0, 200, 0, 240)
        mainFrame.Position = UDim2.new(0.85, -100, 0.75, -120)
        mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
        mainFrame.BackgroundTransparency = 0
        mainFrame.BorderSizePixel = 0
        mainFrame.Active = true
        mainFrame.Draggable = true
        mainFrame.Parent = screenGui
        
        local uicorner = Instance.new("UICorner")
        uicorner.CornerRadius = UDim.new(0, 8)
        uicorner.Parent = mainFrame
        
        local uiStroke = Instance.new("UIStroke")
        uiStroke.Thickness = 1
        uiStroke.Color = Color3.fromRGB(50, 50, 60)
        uiStroke.Transparency = 0.5
        uiStroke.Parent = mainFrame
        
        local headerFrame = Instance.new("Frame")
        headerFrame.Size = UDim2.new(1, 0, 0, 35)
        headerFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
        headerFrame.BorderSizePixel = 0
        headerFrame.Parent = mainFrame
        
        local headerCorner = Instance.new("UICorner")
        headerCorner.CornerRadius = UDim.new(0, 8)
        headerCorner.Parent = headerFrame
        
        local headerLabel = Instance.new("TextLabel")
        headerLabel.Size = UDim2.new(0.9, 0, 0, 20)
        headerLabel.Position = UDim2.new(0.05, 0, 0.5, -10)
        headerLabel.BackgroundTransparency = 1
        headerLabel.Text = "NEOX HUB"
        headerLabel.TextColor3 = Color3.fromRGB(220, 220, 255)
        headerLabel.Font = Enum.Font.GothamBold
        headerLabel.TextSize = 16
        headerLabel.Parent = headerFrame
        
        local minimizeButton = Instance.new("TextButton")
        minimizeButton.Size = UDim2.new(0, 25, 0, 25)
        minimizeButton.Position = UDim2.new(1, -35, 0.5, -12)
        minimizeButton.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
        minimizeButton.Text = "-"
        minimizeButton.TextColor3 = Color3.fromRGB(200, 200, 200)
        minimizeButton.Font = Enum.Font.Gotham
        minimizeButton.TextSize = 16
        minimizeButton.Parent = headerFrame
        
        local minCorner = Instance.new("UICorner")
        minCorner.CornerRadius = UDim.new(0, 5)
        minCorner.Parent = minimizeButton
        
        local toggleButton = Instance.new("TextButton")
        toggleButton.Size = UDim2.new(0.9, 0, 0, 35)
        toggleButton.Position = UDim2.new(0.05, 0, 0, 50)
        toggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
        toggleButton.Text = "NPC Camlock: OFF"
        toggleButton.TextColor3 = Color3.fromRGB(180, 180, 200)
        toggleButton.Font = Enum.Font.GothamSemibold
        toggleButton.TextSize = 14
        toggleButton.Parent = mainFrame
        
        local uicorner2 = Instance.new("UICorner")
        uicorner2.CornerRadius = UDim.new(0, 6)
        uicorner2.Parent = toggleButton
        
        local toggleStroke = Instance.new("UIStroke")
        toggleStroke.Thickness = 1
        toggleStroke.Color = Color3.fromRGB(60, 60, 80)
        toggleStroke.Transparency = 0.6
        toggleStroke.Parent = toggleButton
        
        local toggleHitboxButton = Instance.new("TextButton")
        toggleHitboxButton.Size = UDim2.new(0.9, 0, 0, 35)
        toggleHitboxButton.Position = UDim2.new(0.05, 0, 0, 90)
        toggleHitboxButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
        toggleHitboxButton.Text = "NPC Hitbox: Default"
        toggleHitboxButton.TextColor3 = Color3.fromRGB(180, 180, 200)
        toggleHitboxButton.Font = Enum.Font.GothamSemibold
        toggleHitboxButton.TextSize = 14
        toggleHitboxButton.Parent = mainFrame
        
        local uicorner3 = Instance.new("UICorner")
        uicorner3.CornerRadius = UDim.new(0, 6)
        uicorner3.Parent = toggleHitboxButton
        
        local hitboxStroke = Instance.new("UIStroke")
        hitboxStroke.Thickness = 1
        hitboxStroke.Color = Color3.fromRGB(60, 60, 80)
        hitboxStroke.Transparency = 0.6
        hitboxStroke.Parent = toggleHitboxButton
        
        local npcLockButton = Instance.new("TextButton")
        npcLockButton.Size = UDim2.new(0.9, 0, 0, 35)
        npcLockButton.Position = UDim2.new(0.05, 0, 0, 130)
        npcLockButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
        npcLockButton.Text = "NPC Lock: OFF (X)"
        npcLockButton.TextColor3 = Color3.fromRGB(180, 180, 200)
        npcLockButton.Font = Enum.Font.GothamSemibold
        npcLockButton.TextSize = 14
        npcLockButton.Parent = mainFrame
        
        local uicorner4 = Instance.new("UICorner")
        uicorner4.CornerRadius = UDim.new(0, 6)
        uicorner4.Parent = npcLockButton
        
        local npcLockStroke = Instance.new("UIStroke")
        npcLockStroke.Thickness = 1
        npcLockStroke.Color = Color3.fromRGB(60, 60, 80)
        npcLockStroke.Transparency = 0.6
        npcLockStroke.Parent = npcLockButton
        
        local separatorLine = Instance.new("Frame")
        separatorLine.Size = UDim2.new(0.9, 0, 0, 1)
        separatorLine.Position = UDim2.new(0.05, 0, 0, 170)
        separatorLine.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        separatorLine.BorderSizePixel = 0
        separatorLine.Parent = mainFrame
        
        local discordButton = Instance.new("TextButton")
        discordButton.Size = UDim2.new(0.9, 0, 0, 35)
        discordButton.Position = UDim2.new(0.05, 0, 0, 180)
        discordButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
        discordButton.Text = "Copy Discord Invite"
        discordButton.TextColor3 = Color3.fromRGB(180, 180, 200)
        discordButton.Font = Enum.Font.GothamSemibold
        discordButton.TextSize = 14
        discordButton.Parent = mainFrame
        
        local uicorner5 = Instance.new("UICorner")
        uicorner5.CornerRadius = UDim.new(0, 6)
        uicorner5.Parent = discordButton
        
        local discordStroke = Instance.new("UIStroke")
        discordStroke.Thickness = 1
        discordStroke.Color = Color3.fromRGB(60, 60, 80)
        discordStroke.Transparency = 0.6
        discordStroke.Parent = discordButton
        
        local creditLabel = Instance.new("TextLabel")
        creditLabel.Size = UDim2.new(0.9, 0, 0, 15)
        creditLabel.Position = UDim2.new(0.05, 0, 1, -20)
        creditLabel.BackgroundTransparency = 1
        creditLabel.Text = "Made by hassanxzayn"
        creditLabel.TextColor3 = Color3.fromRGB(100, 100, 120)
        creditLabel.Font = Enum.Font.Gotham
        creditLabel.TextSize = 10
        creditLabel.Parent = mainFrame
        
        mainFrame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                UserInputService.MouseBehavior = Enum.MouseBehavior.Default
            end
        end)
        mainFrame.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
            end
        end)
        
        local minimized = false
        minimizeButton.MouseButton1Click:Connect(function()
            minimized = not minimized
            if minimized then
                mainFrame.Size = UDim2.new(0, 200, 0, 35)
                minimizeButton.Text = "+"
            else
                mainFrame.Size = UDim2.new(0, 200, 0, 240) 
                minimizeButton.Text = "-"
            end
            toggleButton.Visible = not minimized
            toggleHitboxButton.Visible = not minimized
            npcLockButton.Visible = not minimized
            separatorLine.Visible = not minimized
            discordButton.Visible = not minimized
            creditLabel.Visible = not minimized
        end)
        
        discordButton.MouseButton1Click:Connect(function()
            setclipboard("https://discord.gg/99UuEwM9sX")
            discordButton.Text = "Copied!"
            task.wait(1)
            discordButton.Text = "Copy Discord Invite"
        end)
        
        local function createESP(target)
            if target and target.Parent then
                if targetESP then targetESP:Destroy() end
                targetESP = Instance.new("Highlight")
                targetESP.FillTransparency = 1
                targetESP.OutlineColor = Color3.fromRGB(255, 0, 0)
                targetESP.OutlineTransparency = 0
                targetESP.Parent = target.Parent
            end
        end
        
        local function removeESP()
            if targetESP then
                targetESP:Destroy()
                targetESP = nil
            end
        end
        
        local function hasClearLineOfSight(targetHead)
            local origin = cam.CFrame.Position
            local direction = (targetHead.Position - origin).unit * (targetHead.Position - origin).Magnitude
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
            raycastParams.FilterDescendantsInstances = {player.Character}
            local result = Workspace:Raycast(origin, direction, raycastParams)
            return result == nil or result.Instance:IsDescendantOf(targetHead.Parent)
        end
        
        local function getClosestNPCTarget()
            local character = player.Character
            if not character or not character:FindFirstChild("HumanoidRootPart") then
                return nil
            end
            local closestNPCHead = nil
            local shortestDistance = math.huge
            for npc, _ in pairs(trackedNPCs) do
                if npc and npc.Parent then
                    local humanoid = npc:FindFirstChild("Humanoid")
                    local head = npc:FindFirstChild("Head")
                    if humanoid and head then
                        local distance = (head.Position - character.HumanoidRootPart.Position).Magnitude
                        if distance <= 330 
                           and humanoid.Health > 0 
                           and humanoid:GetState() ~= Enum.HumanoidStateType.Dead 
                           and distance < shortestDistance 
                           and hasClearLineOfSight(head) then
                            shortestDistance = distance
                            closestNPCHead = head
                        end
                    end
                else
                    trackedNPCs[npc] = nil
                end
            end
            return closestNPCHead
        end
        
        local targetHead = nil
        local lastTargetUpdate = 0
        local targetUpdateInterval = 0.1
        
        local function startCamlock()
            camlockConnection = RunService.RenderStepped:Connect(function()
                local currentTime = tick()
                if currentTime - lastTargetUpdate >= targetUpdateInterval then
                    targetHead = getClosestNPCTarget()
                    lastTargetUpdate = currentTime
                end
                if targetHead then
                    local distance = (targetHead.Position - cam.CFrame.Position).Magnitude
                    if distance > 300 then
                        removeESP()
                    else
                        local heightCompensation = math.clamp(distance * 0, 0.2, 1.8)
                        local headPos = targetHead.Position + Vector3.new(0, targetHead.Size.Y / 2 - heightCompensation, 0)
                        local camPos = cam.CFrame.Position
                        local direction = (headPos - camPos).unit
                        local newCF = CFrame.lookAt(camPos, camPos + direction)
                        cam.CFrame = newCF
                        createESP(targetHead)
                    end
                else
                    removeESP()
                end
            end)
        end
        
        local function stopCamlock()
            if camlockConnection then
                camlockConnection:Disconnect()
                camlockConnection = nil
            end
            removeESP()
        end
        
        toggleButton.MouseButton1Click:Connect(function()
            camlockEnabled = not camlockEnabled
            if camlockEnabled then
                toggleButton.Text = "NPC Camlock: ON"
                toggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
                toggleButton.TextColor3 = Color3.fromRGB(200, 200, 255)
                startCamlock()
            else
                toggleButton.Text = "NPC Camlock: OFF"
                toggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
                toggleButton.TextColor3 = Color3.fromRGB(180, 180, 200)
                stopCamlock()
            end
        end)
        
        local function addPlayerHighlight()
            if player.Character then
                local highlight = player.Character:FindFirstChild("PlayerHighlightESP")
                if not highlight then
                    highlight = Instance.new("Highlight")
                    highlight.Name = "PlayerHighlightESP"
                    highlight.FillColor = Color3.new(1, 1, 1)
                    highlight.OutlineColor = Color3.new(1, 1, 1)
                    highlight.FillTransparency = 0.5
                    highlight.OutlineTransparency = 0
                    highlight.Parent = player.Character
                end
            end
        end
        
        local function removePlayerHighlight()
            if player.Character and player.Character:FindFirstChild("PlayerHighlightESP") then
                player.Character.PlayerHighlightESP:Destroy()
            end
        end
        
        local function getClosestNPC()
            local closestNPC = nil
            local closestDistance = math.huge
            for _, object in ipairs(Workspace:GetDescendants()) do
                if object:IsA("Model") then
                    local humanoid = object:FindFirstChild("Humanoid") or object:FindFirstChildWhichIsA("Humanoid")
                    local hrp = object:FindFirstChild("HumanoidRootPart") or object.PrimaryPart
                    if humanoid and hrp and humanoid.Health > 0 and object.Name ~= "Horse" then
                        local isPlayer = false
                        for _, pl in ipairs(Players:GetPlayers()) do
                            if pl.Character == object then
                                isPlayer = true
                                break
                            end
                        end
                        if not isPlayer then
                            local distance = (hrp.Position - player.Character.HumanoidRootPart.Position).Magnitude
                            if distance < closestDistance then
                                closestDistance = distance
                                closestNPC = object
                            end
                        end
                    end
                end
            end
            return closestNPC
        end
        
        local function toggleNPCLock()
            npcLock = not npcLock
            if npcLock then
                npcLockButton.Text = "NPC Lock: ON (X)"
                npcLockButton.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
                npcLockButton.TextColor3 = Color3.fromRGB(200, 200, 255)
                toggleLoop = RunService.RenderStepped:Connect(function()
                    local npc = getClosestNPC()
                    if npc and npc:FindFirstChild("Humanoid") then
                        local npcHumanoid = npc:FindFirstChild("Humanoid")
                        if npcHumanoid.Health > 0 then
                            cam.CameraSubject = npcHumanoid
                            lastTarget = npc
                            addPlayerHighlight()
                        else
                            StarterGui:SetCore("SendNotification", {
                                Title = "Killed NPC",
                                Text = npc.Name,
                                Duration = 0.4
                            })
                            lastTarget = nil
                            removePlayerHighlight()
                            if player.Character and player.Character:FindFirstChild("Humanoid") then
                                cam.CameraSubject = player.Character:FindFirstChild("Humanoid")
                            end
                        end
                    else
                        if player.Character and player.Character:FindFirstChild("Humanoid") then
                            cam.CameraSubject = player.Character:FindFirstChild("Humanoid")
                        end
                        lastTarget = nil
                        removePlayerHighlight()
                    end
                end)
            else
                npcLockButton.Text = "NPC Lock: OFF (X)"
                npcLockButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
                npcLockButton.TextColor3 = Color3.fromRGB(180, 180, 200)
                if toggleLoop then
                    toggleLoop:Disconnect()
                    toggleLoop = nil
                end
                removePlayerHighlight()
                if player.Character and player.Character:FindFirstChild("Humanoid") then
                    cam.CameraSubject = player.Character:FindFirstChild("Humanoid")
                end
            end
        end
        
        npcLockButton.MouseButton1Click:Connect(toggleNPCLock)
        UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if not gameProcessed and input.KeyCode == Enum.KeyCode.X then
                toggleNPCLock()
            end
        end)
        
        local function updateNPCHitbox(npc)
            if npc:IsA("Model") and npc:FindFirstChild("Humanoid") and npc:FindFirstChild("HumanoidRootPart") then
                if Players:GetPlayerFromCharacter(npc) or npc.Name == "Horse" then return end
                local humanoid = npc.Humanoid
                local hrp = npc.HumanoidRootPart
                if defaultHRPValues[hrp] == nil then
                    defaultHRPValues[hrp] = {
                        Size = hrp.Size,
                        Transparency = hrp.Transparency,
                        CanCollide = hrp.CanCollide
                    }
                end
                if humanoid.Health <= 0 then
                    local defaults = defaultHRPValues[hrp]
                    if defaults then
                        hrp.Size = defaults.Size
                        hrp.Transparency = defaults.Transparency
                        hrp.CanCollide = defaults.CanCollide
                    end
                    return
                end
                if hitboxToggleEnabled then
                    hrp.Size = Vector3.new(10, 10, 10)
                    hrp.Transparency = 0.85
                    hrp.CanCollide = false
                else
                    local defaults = defaultHRPValues[hrp]
                    if defaults then
                        hrp.Size = defaults.Size
                        hrp.Transparency = defaults.Transparency
                        hrp.CanCollide = defaults.CanCollide
                    end
                end
            end
        end
        
        local function updateAllNPCsHitbox()
            for _, obj in ipairs(Workspace:GetDescendants()) do
                if obj:IsA("Model") 
                   and obj:FindFirstChild("HumanoidRootPart") 
                   and obj:FindFirstChild("Humanoid") 
                   and not Players:GetPlayerFromCharacter(obj) then
                    updateNPCHitbox(obj)
                end
            end
        end
        
        toggleHitboxButton.MouseButton1Click:Connect(function()
            hitboxToggleEnabled = not hitboxToggleEnabled
            if hitboxToggleEnabled then
                toggleHitboxButton.Text = "NPC Hitbox: ON"
                toggleHitboxButton.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
                toggleHitboxButton.TextColor3 = Color3.fromRGB(200, 200, 255)
            else
                toggleHitboxButton.Text = "NPC Hitbox: Default"
                toggleHitboxButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
                toggleHitboxButton.TextColor3 = Color3.fromRGB(180, 180, 200)
            end
            updateAllNPCsHitbox()
        end)
        
        Workspace.DescendantAdded:Connect(function(obj)
            if obj:IsA("Model") then
                local humanoid = obj:FindFirstChild("Humanoid") or obj:WaitForChild("Humanoid", 5)
                if humanoid then
                    local hrp = obj:FindFirstChild("HumanoidRootPart") or obj:WaitForChild("HumanoidRootPart", 5)
                    if hrp and not Players:GetPlayerFromCharacter(obj) then
                        if defaultHRPValues[hrp] == nil then
                            defaultHRPValues[hrp] = {
                                Size = hrp.Size,
                                Transparency = hrp.Transparency,
                                CanCollide = hrp.CanCollide
                            }
                        end
                        humanoid.Died:Connect(function()
                            task.wait(0.2)
                            local defaults = defaultHRPValues[hrp]
                            if defaults then
                                hrp.Size = defaults.Size
                                hrp.Transparency = defaults.Transparency
                                hrp.CanCollide = defaults.CanCollide
                            end
                        end)
                        task.wait(0.5)
                        updateNPCHitbox(obj)
                    end
                end
            end
        end)
        
        local function addNPC(npc)
            if npc:IsA("Model") 
               and npc:FindFirstChild("Humanoid") 
               and npc:FindFirstChild("HumanoidRootPart") 
               and not Players:GetPlayerFromCharacter(npc)
               and npc.Name ~= "Horse" then
                trackedNPCs[npc] = true
            end
        end
        
        for _, obj in ipairs(Workspace:GetDescendants()) do
            if obj:IsA("Model") 
               and obj:FindFirstChild("Humanoid") 
               and obj:FindFirstChild("HumanoidRootPart") 
               and not Players:GetPlayerFromCharacter(obj)
               and npc.Name ~= "Horse" then
                addNPC(obj)
            end
        end
        
        Workspace.DescendantAdded:Connect(function(obj)
            if obj:IsA("Model") then
                task.wait(0.5)
                addNPC(obj)
            end
        end)
        
        Workspace.DescendantRemoving:Connect(function(obj)
            if trackedNPCs[obj] then
                trackedNPCs[obj] = nil
            end
        end)
        
        spawn(function()
            while task.wait(1) do
                for npc, _ in pairs(trackedNPCs) do
                    if npc and npc.Parent then
                        local humanoid = npc:FindFirstChild("Humanoid")
                        local hrp = npc:FindFirstChild("HumanoidRootPart")
                        if humanoid and hrp and humanoid.Health <= 0 then
                            local defaults = defaultHRPValues[hrp]
                            if defaults then
                                hrp.Size = defaults.Size
                                hrp.Transparency = defaults.Transparency
                                hrp.CanCollide = defaults.CanCollide
                            end
                        end
                    else
                        trackedNPCs[npc] = nil
                    end
                end
            end
        end)
    end
})







local ESPHandles = {}
local ESPEnabled = false
local ESPConfig = {
    Colors = {
        Items = Color3.fromRGB(255, 105, 105),    
        Animals = Color3.fromRGB(170, 85, 255),    
        NightEnemies = Color3.fromRGB(85, 170, 255),
        Zombies = Color3.fromRGB(85, 255, 85)       
    },
    Settings = {
        OutlineTransparency = 0.2,
        FillTransparency = 0.6,
        TextSize = 16,
        BillboardSize = UDim2.new(0, 120, 0, 30)
    }
}

local function CreateESP(object, color, category)
    if not object or not object.PrimaryPart then return end

    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_ProHighlight"
    highlight.Adornee = object
    highlight.FillColor = color
    highlight.OutlineColor = color
    highlight.FillTransparency = ESPConfig.Settings.FillTransparency
    highlight.OutlineTransparency = ESPConfig.Settings.OutlineTransparency
    highlight.Parent = object

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_ProBillboard"
    billboard.Adornee = object.PrimaryPart
    billboard.Size = ESPConfig.Settings.BillboardSize
    billboard.StudsOffset = Vector3.new(0, 2.5, 0)
    billboard.AlwaysOnTop = true
    billboard.LightInfluence = 0
    billboard.Parent = object

    local textLabel = Instance.new("TextLabel")
    textLabel.Text = object.Name
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.TextColor3 = color
    textLabel.BackgroundTransparency = 1
    textLabel.TextSize = ESPConfig.Settings.TextSize
    textLabel.Font = Enum.Font.SourceSansSemibold
    textLabel.TextStrokeTransparency = 0.4
    textLabel.TextStrokeColor3 = Color3.fromRGB(20, 20, 20)
    textLabel.Parent = billboard

    ESPHandles[object] = {Highlight = highlight, Billboard = billboard}
end

local function ClearESP()
    for obj, handles in pairs(ESPHandles) do
        if handles.Highlight then handles.Highlight:Destroy() end
        if handles.Billboard then handles.Billboard:Destroy() end
    end
    ESPHandles = {}
end

local function UpdateESP()
    ClearESP()

    local runtimeItems = workspace:FindFirstChild("RuntimeItems")
    if runtimeItems then
        for _, item in ipairs(runtimeItems:GetDescendants()) do
            if item:IsA("Model") then
                CreateESP(item, ESPConfig.Colors.Items, "Items")
            end
        end
    end

    local baseplates = workspace:FindFirstChild("Baseplates")
    if baseplates and #baseplates:GetChildren() >= 2 then
        local secondBaseplate = baseplates:GetChildren()[2]
        local centerBaseplate = secondBaseplate and secondBaseplate:FindFirstChild("CenterBaseplate")
        local animals = centerBaseplate and centerBaseplate:FindFirstChild("Animals")
        if animals then
            for _, animal in ipairs(animals:GetDescendants()) do
                if animal:IsA("Model") then
                    CreateESP(animal, ESPConfig.Colors.Animals, "Animals")
                end
            end
        end
    end

    local nightEnemies = workspace:FindFirstChild("NightEnemies")
    if nightEnemies then
        for _, enemy in ipairs(nightEnemies:GetDescendants()) do
            if enemy:IsA("Model") then
                CreateESP(enemy, ESPConfig.Colors.NightEnemies, "NightEnemies")
            end
        end
    end

    local destroyedHouse = workspace:FindFirstChild("RandomBuildings") and workspace.RandomBuildings:FindFirstChild("DestroyedHouse")
    local zombiePart = destroyedHouse and destroyedHouse:FindFirstChild("StandaloneZombiePart")
    local zombies = zombiePart and zombiePart:FindFirstChild("Zombies")
    if zombies then
        for _, zombie in ipairs(zombies:GetChildren()) do
            if zombie:IsA("Model") then
                CreateESP(zombie, ESPConfig.Colors.Zombies, "Zombies")
            end
        end
    end
end

local function AutoUpdateESP()
    while ESPEnabled do
        UpdateESP()
        task.wait(0.5)
    end
end

local Toggle = Tabs.Esp:AddToggle("ESP_Toggle",  
{
    Title = "All In One ESP", 
    Description = "",
    Default = false,
    Callback = function(Value)
        ESPEnabled = Value
        if Value then
            UpdateESP()
            coroutine.wrap(AutoUpdateESP)()
        else
            ClearESP()
        end
    end
})




local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local espEnabled = false

local function hideDefaultNameTag(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None 
    end
end

local function createHealthDisplay(player)
    if not player.Character then return end
    local character = player.Character
    local head = character:FindFirstChild("Head")
    if not head then return end

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    hideDefaultNameTag(character)

    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Size = UDim2.new(4, 0, 2, 0)
    billboardGui.Adornee = head
    billboardGui.StudsOffset = Vector3.new(0, 2.5, 0)
    billboardGui.MaxDistance = math.huge
    billboardGui.Parent = head
    billboardGui.AlwaysOnTop = true

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 0.3, 0)
    nameLabel.Position = UDim2.new(0, 0, 0, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextScaled = true
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
    nameLabel.TextStrokeTransparency = 0.2
    nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    nameLabel.Text = player.Name
    nameLabel.Parent = billboardGui

    local leaderstatsLabel = Instance.new("TextLabel")
    leaderstatsLabel.Size = UDim2.new(1, 0, 0.3, 0)
    leaderstatsLabel.Position = UDim2.new(0, 0, 0.35, 0)
    leaderstatsLabel.BackgroundTransparency = 1
    leaderstatsLabel.TextScaled = true
    leaderstatsLabel.Font = Enum.Font.GothamBold
    leaderstatsLabel.TextColor3 = Color3.fromRGB(0, 255, 255)
    leaderstatsLabel.TextStrokeTransparency = 0.2
    leaderstatsLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    leaderstatsLabel.Text = "" 
    leaderstatsLabel.Parent = billboardGui

    local healthText = Instance.new("TextLabel")
    healthText.Size = UDim2.new(1, 0, 0.3, 0)
    healthText.Position = UDim2.new(0, 0, 0.7, 0)
    healthText.BackgroundTransparency = 1
    healthText.TextScaled = true
    healthText.Font = Enum.Font.GothamBold
    healthText.TextColor3 = Color3.fromRGB(255, 255, 255)
    healthText.TextStrokeTransparency = 0.2
    healthText.TextStrokeColor3 = Color3.new(0, 0, 0)
    healthText.Parent = billboardGui

    local function updateDisplay()
        if humanoid and humanoid.Health > 0 then
            healthText.Text = tostring(math.floor(humanoid.Health)) .. " HP"
        else
            billboardGui:Destroy()
            return
        end

        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local statsText = ""
            for _, stat in pairs(leaderstats:GetChildren()) do
                if stat:IsA("IntValue") or stat:IsA("StringValue") or stat:IsA("NumberValue") then
                    statsText = statsText .. stat.Name .. ": " .. tostring(stat.Value) .. "  "
                end
            end
            leaderstatsLabel.Text = statsText
        else
            leaderstatsLabel.Text = ""
        end
    end

    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not espEnabled or not player or not player.Parent or not character.Parent then
            billboardGui:Destroy()
            connection:Disconnect()
            return
        end
        updateDisplay()
    end)

    updateDisplay()
end

local function onPlayerAdded(player)
    local function onCharacterAdded(character)
        task.wait(0.5) 
        if espEnabled then
            hideDefaultNameTag(character)
            createHealthDisplay(player)
        end
    end

    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

local function onPlayerRemoving(player)
    if player.Character then
        local head = player.Character:FindFirstChild("Head")
        if head then
            local billboardGui = head:FindFirstChildOfClass("BillboardGui")
            if billboardGui then
                billboardGui:Destroy()
            end
        end
    end
end

local Toggle = Tabs.Esp:AddToggle("ESP_Toggle", {
    Title = "Player ESP",
    Description = "Show Player Health, Name, and Money",
    Default = false,
    Callback = function(state)
        espEnabled = state
        if state then
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= Players.LocalPlayer then 
                    if player.Character then
                        createHealthDisplay(player)
                    end
                end
            end
        else
            for _, player in ipairs(Players:GetPlayers()) do
                if player.Character then
                    local head = player.Character:FindFirstChild("Head")
                    if head then
                        local billboardGui = head:FindFirstChildOfClass("BillboardGui")
                        if billboardGui then
                            billboardGui:Destroy()
                        end
                    end
                end
            end
        end
    end
})

for _, player in ipairs(Players:GetPlayers()) do
    onPlayerAdded(player)
end

Players.PlayerAdded:Connect(onPlayerAdded)
Players.PlayerRemoving:Connect(onPlayerRemoving)











local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")

local DayOnlyLoop
local NightOnlyLoop

local DayToggle = Tabs.Weather:AddToggle("OnlyDay_Toggle", {
    Title = "Only Day",
    Description = "",
    Default = false,
    Callback = function(Value)
        if Value then
            DayOnlyLoop = RunService.Heartbeat:Connect(function()
                Lighting.TimeOfDay = "12:00:00"
            end)
        else
            if DayOnlyLoop then
                DayOnlyLoop:Disconnect()
                DayOnlyLoop = nil
            end
        end
    end
})

local NightToggle = Tabs.Weather:AddToggle("OnlyNight_Toggle", {
    Title = "Only Night",
    Description = "",
    Default = false,
    Callback = function(Value)
        if Value then
            NightOnlyLoop = RunService.Heartbeat:Connect(function()
                Lighting.TimeOfDay = "22:00:00"
            end)
        else
            if NightOnlyLoop then
                NightOnlyLoop:Disconnect()
                NightOnlyLoop = nil
            end
        end
    end
})

local FogToggle = Tabs.Weather:AddToggle("RemoveFog_Toggle", {
    Title = "Remove Fog",
    Description = "",
    Default = false,
    Callback = function(Value)
        if Value then
            local sky = Lighting:FindFirstChild("GrayCloudSky")
            if sky then
                sky.Parent = Lighting.Bloom
            end
        else
            local skyInBloom = Lighting.Bloom:FindFirstChild("GrayCloudSky")
            if skyInBloom then
                skyInBloom.Parent = Lighting
            end
        end
    end
})


Tabs.Misc:AddButton({
    Title = "Anti AFK",
    Description = "",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/hassanxzayn-lua/Anti-afk/main/antiafkbyhassanxzyn"))();
    end
})

Tabs.Misc:AddButton({
    Title = "Infiniteyield Reborn",
    Description = "",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/RyXeleron/infiniteyield-reborn/refs/heads/scriptblox/source"))()
    end
})


local Section = Tabs.Misc:AddSection("Character")



local TeleportToggle = Tabs.Misc:AddToggle("TeleportToggle", 
{
    Title = "T + Left Click Teleport", 
    Description = "",
    Default = false,
    Callback = function(Value)
        if not hasUserToggled and not isTeleportEnabled then
            hasUserToggled = true
            isTeleportEnabled = Value
            return
        end

        isTeleportEnabled = Value
        if Value then
            if not connection then
                connection = game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
                    if not gameProcessed and isTeleportEnabled and input.UserInputType == Enum.UserInputType.MouseButton1 then
                        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.T) then
                            local player = game:GetService("Players").LocalPlayer
                            local mouse = player:GetMouse()
                            player.Character:MoveTo(Vector3.new(mouse.Hit.x, mouse.Hit.y, mouse.Hit.z))
                        end
                    end
                end)
            end
        else
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end
})


local InfiniteJumpToggle = Tabs.Misc:AddToggle("InfiniteJumpToggle", 
{
    Title = "Infinite Jumps", 
    Description = "",
    Default = false,
    Callback = function(Value)
        _G.infinjump = Value
    end
})

if not _G.infinJumpStarted then
    _G.infinJumpStarted = true
    _G.infinjump = false

    local plr = game:GetService('Players').LocalPlayer
    local m = plr:GetMouse()

    m.KeyDown:Connect(function(key)
        if _G.infinjump then
            if key:byte() == 32 then
                local humanoid = plr.Character and plr.Character:FindFirstChildOfClass('Humanoid')
                if humanoid then
                    humanoid:ChangeState('Jumping')
                    wait()
                    humanoid:ChangeState('Seated')
                end
            end
        end
    end)
end



local Noclip = nil
local Clip = true

function noclip()
	Clip = false
	local function Nocl()
		if Clip == false and game.Players.LocalPlayer.Character ~= nil then
			for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
				if v:IsA('BasePart') and v.CanCollide and v.Name ~= floatName then
					v.CanCollide = false
				end
			end
		end
		wait(0.21)
	end
	Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
end

function clip()
	if Noclip then 
		Noclip:Disconnect()
	end
	Clip = true
	if game.Players.LocalPlayer.Character then
		for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
			if v:IsA('BasePart') and v.CanCollide == false then
				v.CanCollide = true
			end
		end
	end
end

local Toggle = Tabs.Misc:AddToggle("MyToggle", {
    Title = "Noclip",
    Description = "",
    Default = false,
    Callback = function(state)
        if state then
            noclip()
        else
            clip()
        end
    end
})




local Slider = Tabs.Misc:AddSlider("SpeedSlider", 
{
    Title = "WalkSpeed",
    Description = "",
    Default = 16,
    Min = 16,
    Max = 500,
    Rounding = 1,
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
    end
})

local Slider = Tabs.Misc:AddSlider("JumpSlider", 
{
    Title = "Jump Power",
    Description = "",
    Default = 50,
    Min = 50,
    Max = 500,
    Rounding = 1,
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
    end
})



local Input = Tabs.Misc:AddInput("FOVInput", 
{
    Title = "Change FOV",
    Description = "",
    Default = "70",
    Placeholder = "Enter FOV value",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local fov = tonumber(Value)
        if fov then
            game.Workspace.Camera.FieldOfView = fov
            print("FOV set to:", fov)
        else
            warn("Invalid FOV value entered")
        end
    end
})











Tabs.Performance:AddButton({
    Title = "Enable FPS Counter & Boost",
    Description = "",
    Callback = function()
        if not gethui then
            warn("Incompatible executor: gethui is unavailable")
            return
        end

        local runService = game:GetService("RunService")
        local lighting = game:GetService("Lighting")

        local fpsCounterGui = Instance.new("ScreenGui", gethui())
        local fpsLabel = Instance.new("TextLabel", fpsCounterGui)

        fpsCounterGui.Name = "FpsCounterGui"
        fpsCounterGui.IgnoreGuiInset = true
        fpsLabel.Name = "FpsLabel"
        fpsLabel.BackgroundTransparency = 1
        fpsLabel.Position = UDim2.new(1, -100, 0, 0)
        fpsLabel.Size = UDim2.new(0, 100, 0, 30)
        fpsLabel.Text = ""
        fpsLabel.TextSize = 16
        fpsLabel.TextStrokeTransparency = 0.6
        fpsLabel.Draggable = true

        local function GetFPS(delay)
            local startTime = tick()
            local frames = 0
            local heartbeatConnection = runService.Heartbeat:Connect(function()
                frames = frames + 1
            end)
            task.wait(delay)
            heartbeatConnection:Disconnect()
            local elapsedTime = tick() - startTime
            local fps = frames / elapsedTime
            return math.ceil(fps)
        end

        task.spawn(function()
            while true do
                local fps = GetFPS(0.5)
                if fps >= 60 then
                    fpsLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
                elseif fps <= 59 and fps > 50 then
                    fpsLabel.TextColor3 = Color3.fromRGB(255, 170, 0)
                elseif fps <= 49 and fps > 30 then
                    fpsLabel.TextColor3 = Color3.fromRGB(255, 85, 0)
                elseif fps <= 29 then
                    fpsLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                end
                fpsLabel.Text = tostring(fps) .. " FPS"
            end
        end)

        lighting.GlobalShadows = false
        lighting.FogEnd = 9e9
        lighting.EnvironmentDiffuseScale = 0.5
        lighting.EnvironmentSpecularScale = 0.5

        for _, descendant in ipairs(game:GetDescendants()) do
            if descendant:IsA("BasePart") then
                descendant.CastShadow = false
                descendant.Material = Enum.Material.SmoothPlastic
                descendant.Reflectance = 0
                if descendant:IsA("MeshPart") then
                    descendant.CollisionFidelity = Enum.CollisionFidelity.Box
                end
            end
            if descendant:IsA("Decal") or descendant:IsA("Texture") then
                if descendant.Transparency > 0.25 then
                    descendant.Transparency = 0.25
                end
            end
            if descendant:IsA("ParticleEmitter") or descendant:IsA("Trail") then
                descendant.Lifetime = NumberRange.new(0)
            end
        end
    end
})









local VirtualInputManager = game:GetService("VirtualInputManager")
local isHoldingW = false

Tabs.Train:AddToggle("AutoRunTrain", {
    Title = "Auto Run Train",
    Description = "",
    Default = false,
    Callback = function(state)
        isHoldingW = state
        if isHoldingW then
            task.spawn(function()
                while isHoldingW do
                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.W, false, game)
                    task.wait(0.1)
                end
            end)
        else
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.W, false, game)
        end
    end
})
















getgenv().esptrain = false 
local runService = game:GetService("RunService")
local trainFolder = workspace:FindFirstChild("Train")

local function addTrainESP(train)
    if not train:FindFirstChild("ESP_Highlight") then
        pcall(function()
            local highlight = Instance.new("Highlight")
            highlight.Name = "ESP_Highlight"
            highlight.FillColor = Color3.fromRGB(255, 255, 255)
            highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
            highlight.FillTransparency = 0.5
            highlight.OutlineTransparency = 0
            highlight.Adornee = train
            highlight.Parent = train
        end)
    end
end

local function removeTrainESP(train)
    if train:FindFirstChild("ESP_Highlight") then
        train.ESP_Highlight:Destroy()
    end
end

runService.RenderStepped:Connect(function()
    if trainFolder then
        for _, train in ipairs(trainFolder:GetChildren()) do
            if getgenv().esptrain then
                addTrainESP(train)
            else
                removeTrainESP(train)
            end
        end
    end
end)

local Toggle = Tabs.Train:AddToggle("MyToggle", 
{
    Title = "Train ESP", 
    Description = "",
    Default = false,
    Callback = function(state)
        getgenv().esptrain = state
    end 
})


local textLabel1 = game.Workspace.Train.TrainControls.DistanceDial.SurfaceGui.TextLabel
local textLabel2 = game.Workspace.Train.TrainControls.TimeDial.SurfaceGui.TextLabel

local metergui, timegui = nil, nil

local function createDisplayGui(state, guiType)
    local parentGui = game:GetService("CoreGui")

    if guiType == "meter" then
        if state then
            if not metergui then
                metergui = Instance.new("ScreenGui")
                local Money = Instance.new("TextLabel")

                metergui.Name = "meter_gui"
                metergui.Parent = parentGui
                metergui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

                Money.Name = "Money"
                Money.Parent = metergui
                Money.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                Money.BackgroundTransparency = 1.000
                Money.BorderSizePixel = 0
                Money.Position = UDim2.new(0.0102, 0, 0.5585, 0)
                Money.Size = UDim2.new(0.0961, 0, 0.0832, 0)
                Money.Font = Enum.Font.SourceSansBold
                Money.TextColor3 = Color3.fromRGB(255, 255, 255)
                Money.TextScaled = true
                Money.TextStrokeTransparency = 0.000
                Money.TextWrapped = true
                Money.TextXAlignment = Enum.TextXAlignment.Left

                local function updateText()
                    Money.Text = textLabel1.Text
                end

                updateText()
                textLabel1:GetPropertyChangedSignal("Text"):Connect(updateText)
            end
            metergui.Enabled = true
        else
            if metergui then
                metergui.Enabled = false
            end
        end
    elseif guiType == "time" then
        if state then
            if not timegui then
                timegui = Instance.new("ScreenGui")
                local TimeLabel = Instance.new("TextLabel")

                timegui.Name = "time_gui"
                timegui.Parent = parentGui
                timegui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

                TimeLabel.Name = "Time"
                TimeLabel.Parent = timegui
                TimeLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                TimeLabel.BackgroundTransparency = 1.000
                TimeLabel.BorderSizePixel = 0
                TimeLabel.Position = UDim2.new(0.0102, 0, 0.6406, 0)
                TimeLabel.Size = UDim2.new(0.0961, 0, 0.0832, 0)
                TimeLabel.Font = Enum.Font.SourceSansBold
                TimeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                TimeLabel.TextScaled = true
                TimeLabel.TextStrokeTransparency = 0.000
                TimeLabel.TextWrapped = true
                TimeLabel.TextXAlignment = Enum.TextXAlignment.Left

                local function updateText()
                    TimeLabel.Text = textLabel2.Text
                end

                updateText()
                textLabel2:GetPropertyChangedSignal("Text"):Connect(updateText)
            end
            timegui.Enabled = true
        else
            if timegui then
                timegui.Enabled = false
            end
        end
    end
end

local Toggle1 = Tabs.Train:AddToggle("DistanceToggle",  
{
    Title = "Distance GUI", 
    Description = "",
    Default = false,
    Callback = function(state)
        createDisplayGui(state, "meter")
    end 
})

local Toggle2 = Tabs.Train:AddToggle("TimeToggle",  
{
    Title = "Time GUI", 
    Description = "",
    Default = false,
    Callback = function(state)
        createDisplayGui(state, "time")
    end 
})


local parentGui = game:GetService("CoreGui")

local Fuel = Instance.new("ScreenGui")
local Fuel_2 = Instance.new("TextLabel")

Fuel.Name = "Fuel"
Fuel.Parent = parentGui 
Fuel.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Fuel.Enabled = false 

Fuel_2.Name = "Fuel"
Fuel_2.Parent = Fuel
Fuel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Fuel_2.BackgroundTransparency = 1.000
Fuel_2.BorderSizePixel = 0
Fuel_2.Position = UDim2.new(0.0102, 0, 0.3421, 0)
Fuel_2.Size = UDim2.new(0.0961, 0, 0.0832, 0)
Fuel_2.Font = Enum.Font.Cartoon
Fuel_2.TextColor3 = Color3.fromRGB(255, 0, 4)
Fuel_2.TextScaled = true
Fuel_2.TextStrokeTransparency = 0.000
Fuel_2.TextWrapped = true
Fuel_2.TextXAlignment = Enum.TextXAlignment.Left

local function updateFuelDisplay()
    local fuel = game.Workspace:FindFirstChild("Train") and game.Workspace.Train:FindFirstChild("Fuel")
    if fuel and fuel:IsA("IntValue") then
        Fuel_2.Text = "Fuel: " .. fuel.Value
    else
        Fuel_2.Text = "Fuel not found"
    end
end

updateFuelDisplay()

local fuel = game.Workspace:FindFirstChild("Train") and game.Workspace.Train:FindFirstChild("Fuel")
if fuel then
    fuel.Changed:Connect(updateFuelDisplay)
end

local Toggle = Tabs.Train:AddToggle("FuelToggle",  
{
    Title = "Fuel GUI", 
    Description = "",
    Default = false,
    Callback = function(state)
        Fuel.Enabled = state
    end 
})




local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local train = Workspace:FindFirstChild("Train")
if not train then
    warn("Train model not found in Workspace!")
    return
end

local trainPart = train.PrimaryPart or train:FindFirstChildWhichIsA("BasePart")
if not trainPart then
    warn("No PrimaryPart found in Train model!")
    return
end

local traindistance = Instance.new("ScreenGui")
traindistance.Name = "TrainDistance"
traindistance.Parent = game:GetService("CoreGui")
traindistance.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local TutorialText = Instance.new("TextLabel")
TutorialText.Name = "TutorialText"
TutorialText.Parent = traindistance
TutorialText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TutorialText.BackgroundTransparency = 1.000
TutorialText.BorderColor3 = Color3.fromRGB(0, 0, 0)
TutorialText.BorderSizePixel = 0
TutorialText.Position = UDim2.new(0.882562518, 0, 0.465028077, 0)
TutorialText.Size = UDim2.new(0.117042422, 0, 0.0666883513, 0)
TutorialText.Font = Enum.Font.Highway
TutorialText.Text = "Train Distance: 999999 Studs"
TutorialText.TextColor3 = Color3.fromRGB(251, 255, 0)
TutorialText.TextScaled = true
TutorialText.TextSize = 14.000
TutorialText.TextStrokeTransparency = 0.000
TutorialText.TextWrapped = true
TutorialText.Visible = false

local toggleActive = false

local Toggle = Tabs.Train:AddToggle("MyToggle", {
    Title = "Train Distance GUI", 
    Description = "",
    Default = false,
    Callback = function(state)
        toggleActive = state
        TutorialText.Visible = state 
    end
})

RunService.Heartbeat:Connect(function()
    if toggleActive and player.Character and player.Character.PrimaryPart then
        local playerPos = player.Character.PrimaryPart.Position
        local trainPos = trainPart.Position
        local distance = (playerPos - trainPos).Magnitude

        TutorialText.Text = "Train Distance: " .. math.floor(distance) .. " Studs"
    end
end)















local clickDetector = game.Workspace.Train.TrainControls.Lever.HitBox.ClickDetector

Tabs.Train:AddButton({
    Title = "Honk Train",
    Description = "Also Has A Keybind (Press H)",
    Callback = function()
        if clickDetector then
            fireclickdetector(clickDetector)
            print("ClickDetector triggered!")
        else
            warn("ClickDetector not found")
        end
    end
})

local UserInputService = game:GetService("UserInputService")

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.H then
        if clickDetector then
            fireclickdetector(clickDetector)
            print("ClickDetector triggered via H key!")
        else
            warn("ClickDetector not found")
        end
    end
end)




Tabs.Teleport:AddButton({
    Title = "Teleport To Test Server",
    Description = "",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local gameId = 98018823628597
        
        local success, error = pcall(function()
            TeleportService:Teleport(gameId, game.Players.LocalPlayer)
        end)
        
        if success then
            print("Teleport initiated to game ID: " .. gameId)
        else
            warn("Teleport failed: " .. error)
        end
    end
})






local Players = game:GetService("Players")
local ProximityPromptService = game:GetService("ProximityPromptService")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")

local player = Players.LocalPlayer
local character = player.Character
local humanoidRootPart = nil
local runtimeItems = nil
local moneybag = nil
local promptConnection = nil
local isRunning = false
local toggleEnabled = false
local isHoldingE = false
local eKeyTask = nil

local function updateCharacter(newCharacter)
    character = newCharacter
    humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
end

local function setupPromptListener()
    if promptConnection then return end
    
    local success, err = pcall(function()
        promptConnection = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
            local noholddelay = true
            if noholddelay and prompt:IsA("ProximityPrompt") then
                prompt.HoldDuration = 0
            end
        end)
    end)
end

local function cleanupPromptListener()
    if promptConnection then
        pcall(function()
            promptConnection:Disconnect()
            promptConnection = nil
        end)
    end
end

local function stopEKey()
    if eKeyTask then
        isHoldingE = false
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
        eKeyTask = nil
    end
end

local function startDetectionLoop()
    if isRunning then return end
    isRunning = true
    
    while isRunning do
        if not toggleEnabled then
            stopEKey()
            cleanupPromptListener()
            task.wait(0.5)
        else
            if not runtimeItems then
                local success, err = pcall(function()
                    runtimeItems = Workspace:WaitForChild("RuntimeItems", 5)
                end)
                if not success or not runtimeItems then
                    break
                end
            end
            
            moneybag = runtimeItems:FindFirstChild("Moneybag")
            
            if moneybag then
                setupPromptListener()
                
                if not eKeyTask and toggleEnabled then
                    isHoldingE = true
                    eKeyTask = task.spawn(function()
                        while isHoldingE do
                            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
                            task.wait(0.1)
                        end
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
                    end)
                end
                
                task.wait(0.1)
            else
                stopEKey()
                cleanupPromptListener()
                task.wait(0.5)
            end
        end
    end
    isRunning = false
    stopEKey()
    cleanupPromptListener()
end

if character then
    updateCharacter(character)
end

player.CharacterAdded:Connect(function(newCharacter)
    updateCharacter(newCharacter)
end)

player.CharacterRemoving:Connect(function()
    character = nil
    humanoidRootPart = nil
end)

coroutine.wrap(startDetectionLoop)()

local Toggle = Tabs.Autofarm:AddToggle("MoneybagCollect", 
{
    Title = "Auto Collect Cash", 
    Description = "",
    Default = false,
    Callback = function(state)
        toggleEnabled = state
        if not state then
            stopEKey()
        end
    end 
})





local Players = game:GetService("Players")
local ProximityPromptService = game:GetService("ProximityPromptService")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")

local player = Players.LocalPlayer
local character = player.Character
local humanoidRootPart = nil
local runtimeItems = nil
local moneybag = nil
local promptConnection = nil
local isRunning = false
local toggleEnabled = false
local isHoldingE = false
local eKeyTask = nil

local function updateCharacter(newCharacter)
    character = newCharacter
    humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
end

local function teleportToMoneybag()
    if not moneybag or not humanoidRootPart then return end
    
    local targetCFrame
    if moneybag.PrimaryPart then
        targetCFrame = moneybag.PrimaryPart.CFrame
    else
        targetCFrame = moneybag:GetModelCFrame()
    end
    
    local safeOffset = CFrame.new(0, 3, -2)
    local safeCFrame = targetCFrame * safeOffset
    
    pcall(function()
        if character:FindFirstChild("Humanoid") then
            character.Humanoid.PlatformStand = true
        end
        
        humanoidRootPart.CFrame = safeCFrame
        task.wait(0.05)
        
        if character:FindFirstChild("Humanoid") then
            character.Humanoid.PlatformStand = false
        end
    end)
end

local function setupPromptListener()
    if promptConnection then return end
    
    local success, err = pcall(function()
        promptConnection = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
            local noholddelay = true
            if noholddelay and prompt:IsA("ProximityPrompt") then
                prompt.HoldDuration = 0
            end
        end)
    end)
end

local function cleanupPromptListener()
    if promptConnection then
        pcall(function()
            promptConnection:Disconnect()
            promptConnection = nil
        end)
    end
end

local function stopEKey()
    if eKeyTask then
        isHoldingE = false
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
        eKeyTask = nil
    end
end

local function startDetectionLoop()
    if isRunning then return end
    isRunning = true
    
    while isRunning do
        if not toggleEnabled then
            stopEKey()
            cleanupPromptListener()
            task.wait(0.5)
        else
            if not runtimeItems then
                local success, err = pcall(function()
                    runtimeItems = Workspace:WaitForChild("RuntimeItems", 5)
                end)
                if not success or not runtimeItems then
                    break
                end
            end
            
            moneybag = runtimeItems:FindFirstChild("Moneybag")
            
            if moneybag then
                if not humanoidRootPart then updateCharacter(character) end
                teleportToMoneybag()
                setupPromptListener()
                
                if not eKeyTask and toggleEnabled then
                    isHoldingE = true
                    eKeyTask = task.spawn(function()
                        while isHoldingE do
                            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
                            task.wait(0.1)
                        end
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
                    end)
                end
                
                task.wait(0.1)
            else
                stopEKey()
                cleanupPromptListener()
                task.wait(0.5)
            end
        end
    end
    isRunning = false
    stopEKey()
    cleanupPromptListener()
end

if character then
    updateCharacter(character)
end

player.CharacterAdded:Connect(function(newCharacter)
    updateCharacter(newCharacter)
end)

player.CharacterRemoving:Connect(function()
    character = nil
    humanoidRootPart = nil
end)

coroutine.wrap(startDetectionLoop)()

local Toggle = Tabs.Autofarm:AddToggle("MoneybagTeleport", 
{
    Title = "Auto Steal Cash", 
    Description = "",
    Default = false,
    Callback = function(state)
        toggleEnabled = state
        if not state then
            stopEKey()
        end
    end 
})






Tabs.Esp:AddButton({
    Title = "Buildings ESP + Zombies Count In Building",
    Description = "Sometimes, it may display 0 zombies even when there are zombies present. If this happens, please click the button again to refresh the count. If it still shows 0 after pressing the button, then there are truly no zombies. However, to confirm, always click the button when it shows 0 zombies",
    Callback = function()
        local buildingsFolder = game.Workspace:FindFirstChild("RandomBuildings")

        if not buildingsFolder then
            warn("Folder not found")
            return
        end
        
        local function ensurePrimaryPart(model)
            if not model.PrimaryPart then
                for _, part in ipairs(model:GetChildren()) do
                    if part:IsA("BasePart") then
                        model.PrimaryPart = part
                        break
                    end
                end
            end
        end
        
        local function countZombies(model)
            local zombiePart = model:FindFirstChild("StandaloneZombiePart")
            if not zombiePart then 
                return 0 
            end
            
            local zombieFolder = zombiePart:FindFirstChild("Zombies")
            if not zombieFolder then 
                return 0 
            end
            
            local count = 0
            for _, item in ipairs(zombieFolder:GetChildren()) do
                if item:IsA("Model") then
                    count = count + 1
                end
            end
            return count
        end
        
        local function createBillboard(model, text, offset, name)
            local primaryPart = model.PrimaryPart
            if not primaryPart then return nil end
        
            local oldGui = model:FindFirstChild(name)
            if oldGui then oldGui:Destroy() end
        
            local billboardGui = Instance.new("BillboardGui")
            billboardGui.Name = name
            billboardGui.Size = UDim2.new(50, 0, 15, 0)
            billboardGui.StudsOffset = Vector3.new(0, offset, 0)
            billboardGui.Adornee = primaryPart
            billboardGui.AlwaysOnTop = true
            billboardGui.Parent = model
        
            local textLabel = Instance.new("TextLabel")
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.TextScaled = true
            textLabel.TextColor3 = Color3.new(1, 1, 0)
            textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
            textLabel.TextStrokeTransparency = 0
            textLabel.Font = Enum.Font.GothamBlack
            textLabel.Text = text
            textLabel.Parent = billboardGui
            
            return billboardGui
        end
        
        local function updateZombieCount(model)
            local zombieGui = model:FindFirstChild("ZombieCounter")
            if zombieGui then
                local textLabel = zombieGui:FindFirstChildOfClass("TextLabel")
                if textLabel then
                    local count = countZombies(model)
                    textLabel.Text = "Zombies: " .. count
                    return count
                end
            end
            return 0
        end
        
        local function setupModel(model)
            if not model:IsA("Model") then return end
            
            ensurePrimaryPart(model)
            
            local zombieCount = countZombies(model)
            local zombieGui = createBillboard(model, "Zombies: " .. zombieCount, 50, "ZombieCounter")
            createBillboard(model, model.Name, 65, "ModelName")
            
            task.spawn(function()
                local attempts = 0
                local maxAttempts = 5
                local lastCount = 0
                
                while attempts < maxAttempts do
                    local currentCount = updateZombieCount(model)
                    if currentCount > 0 and currentCount == lastCount then
                        break
                    end
                    lastCount = currentCount
                    attempts = attempts + 1
                    task.wait(0.5)
                end
            end)
            
            local zombiePart = model:FindFirstChild("StandaloneZombiePart")
            if zombiePart then
                local zombieFolder = zombiePart:FindFirstChild("Zombies")
                if zombieFolder then
                    zombieFolder.ChildAdded:Connect(function()
                        if zombieGui then
                            updateZombieCount(model)
                        end
                    end)
                    
                    zombieFolder.ChildRemoved:Connect(function()
                        if zombieGui then
                            updateZombieCount(model)
                        end
                    end)
                end
            end
            
            model:GetPropertyChangedSignal("Name"):Connect(function()
                local nameGui = model:FindFirstChild("ModelName")
                if nameGui then
                    local textLabel = nameGui:FindFirstChildOfClass("TextLabel")
                    if textLabel then
                        textLabel.Text = model.Name
                    end
                end
            end)
        end
        
        local function cleanupModels()
            for _, child in ipairs(buildingsFolder:GetChildren()) do
                if child:IsA("BillboardGui") then
                    if not child.Parent or not child.Parent:IsA("Model") then
                        child:Destroy()
                    end
                end
            end
        end
        
        local function refreshModels()
            cleanupModels()
            for _, model in ipairs(buildingsFolder:GetChildren()) do
                setupModel(model)
            end
        end
        
        refreshModels()
        
        buildingsFolder.ChildAdded:Connect(function(model)
            task.wait(0.1)
            setupModel(model)
        end)
        
        buildingsFolder.ChildRemoved:Connect(function()
            task.wait(0.1)
            cleanupModels()
        end)
    end
})

local fov = 136
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Cam = workspace.CurrentCamera
local Player = game:GetService("Players").LocalPlayer

local FOVring = Drawing.new("Circle")
FOVring.Visible = false
FOVring.Thickness = 2
FOVring.Color = Color3.fromRGB(128, 0, 128)
FOVring.Filled = false
FOVring.Radius = fov
FOVring.Position = Cam.ViewportSize / 2

local isAiming = false
local validNPCs = {}
local raycastParams = RaycastParams.new()
raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

local Toggle = Tabs.Aimbot:AddToggle("MyToggle", 
{
    Title = "Aimbot + FOV Circle", 
    Description = "Also Has A Keybind (Press T)",
    Default = false,
    Callback = function(value)
        isAiming = value
        FOVring.Visible = value
    end 
})

local function isNPC(obj)
    return obj:IsA("Model") 
        and obj:FindFirstChild("Humanoid")
        and obj.Humanoid.Health > 0
        and obj:FindFirstChild("Head")
        and obj:FindFirstChild("HumanoidRootPart")
        and not game:GetService("Players"):GetPlayerFromCharacter(obj)
end

local function updateNPCs()
    local tempTable = {}
    for _, obj in ipairs(workspace:GetDescendants()) do
        if isNPC(obj) then
            tempTable[obj] = true
        end
    end
    for i = #validNPCs, 1, -1 do
        if not tempTable[validNPCs[i]] then
            table.remove(validNPCs, i)
        end
    end
    for obj in pairs(tempTable) do
        if not table.find(validNPCs, obj) then
            table.insert(validNPCs, obj)
        end
    end
end

local function handleDescendant(descendant)
    if isNPC(descendant) then
        table.insert(validNPCs, descendant)
        local humanoid = descendant:WaitForChild("Humanoid")
        humanoid.Destroying:Connect(function()
            for i = #validNPCs, 1, -1 do
                if validNPCs[i] == descendant then
                    table.remove(validNPCs, i)
                    break
                end
            end
        end)
    end
end

workspace.DescendantAdded:Connect(handleDescendant)

local function updateDrawings()
    FOVring.Position = Cam.ViewportSize / 2
    FOVring.Radius = fov * (Cam.ViewportSize.Y / 1080)
end

local function predictPos(target)
    local rootPart = target:FindFirstChild("HumanoidRootPart")
    local head = target:FindFirstChild("Head")
    if not rootPart or not head then
        return head and head.Position or rootPart and rootPart.Position
    end
    local velocity = rootPart.Velocity
    local predictionTime = 0.02
    local basePosition = rootPart.Position + velocity * predictionTime
    local headOffset = head.Position - rootPart.Position
    return basePosition + headOffset
end

local function getTarget()
    local nearest = nil
    local minDistance = math.huge
    local viewportCenter = Cam.ViewportSize / 2
    raycastParams.FilterDescendantsInstances = {Player.Character}
    for _, npc in ipairs(validNPCs) do
        local predictedPos = predictPos(npc)
        local screenPos, visible = Cam:WorldToViewportPoint(predictedPos)
        if visible and screenPos.Z > 0 then
            local ray = workspace:Raycast(
                Cam.CFrame.Position,
                (predictedPos - Cam.CFrame.Position).Unit * 1000,
                raycastParams
            )
            if ray and ray.Instance:IsDescendantOf(npc) then
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - viewportCenter).Magnitude
                if distance < minDistance and distance < fov then
                    minDistance = distance
                    nearest = npc
                end
            end
        end
    end
    return nearest
end
local function aim(targetPosition)
    local currentCF = Cam.CFrame
    local targetDirection = (targetPosition - currentCF.Position).Unit
    local smoothFactor = 0.581
    local newLookVector = currentCF.LookVector:Lerp(targetDirection, smoothFactor)
    Cam.CFrame = CFrame.new(currentCF.Position, currentCF.Position + newLookVector)
end
local heartbeat = RunService.Heartbeat
local lastUpdate = 0
local UPDATE_INTERVAL = 0.4
heartbeat:Connect(function(dt)
    updateDrawings()
    lastUpdate = lastUpdate + dt
    if lastUpdate >= UPDATE_INTERVAL then
        updateNPCs()
        lastUpdate = 0
    end
    if isAiming then
        local target = getTarget()
        if target then
            local predictedPosition = predictPos(target)
            aim(predictedPosition)
        end
    end
end)
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.T then
        isAiming = not isAiming
        FOVring.Visible = isAiming
        Toggle:SetValue(isAiming) 
    end
end)
updateNPCs()
workspace.DescendantRemoved:Connect(function(descendant)
    if isNPC(descendant) then
        for i = #validNPCs, 1, -1 do
            if validNPCs[i] == descendant then
                table.remove(validNPCs, i)
                break
            end
        end
    end
end)

game:GetService("Players").PlayerRemoving:Connect(function()
    FOVring:Remove()
end)


